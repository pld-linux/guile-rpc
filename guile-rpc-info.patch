--- guile-rpc-0.4/doc/guile-rpc.texi.orig	2014-05-21 12:03:23.000000000 +0200
+++ guile-rpc-0.4/doc/guile-rpc.texi	2016-10-26 17:11:03.587268941 +0200
@@ -37,15 +37,16 @@
 @end quotation
 @end copying
 
-@dircategory The Algorithmic Language Scheme
+@dircategory The Algorithmic Language Scheme:
 @direntry
-* Guile-RPC: (guile-rpc).      An ONC RPC Framework for Guile.
+* Guile-RPC: (guile-rpc).		An ONC RPC Framework for Guile
+* grpc-compile: (guile-rpc)grpc-compile.	Using the XDR/RPC compiler
 @end direntry
 
-@dircategory Network Applications
+@dircategory Net utilities:
 @direntry
-* grpc-rpcinfo: (guile-rpc)Invoking grpc-rpcinfo.
-                               Guile-RPC's portmapper client
+* grpc-nfs-export: (guile-rpc)grpc-nfs-export.	Playing with the toy NFS server
+* grpc-rpcinfo: (guile-rpc)grpc-rpcinfo.	Guile-RPC's portmapper client
 @end direntry
 
 @titlepage
@@ -223,8 +224,7 @@
 Client and server creation are two-step.  Since the first step---data
 type definition---is the same for both, that leaves us with a total of
 three steps, described below.  Nicely, each of these steps can be
-automated using the XDR/RPC language compiler (@pxref{Invoking
-grpc-compile, @code{grpc-compile}}).
+automated using the XDR/RPC language compiler (@pxref{grpc-compile, @code{grpc-compile}}).
 
 @menu
 * Defining Data Types::         Defining RPC data types
@@ -243,7 +243,7 @@
 Before actually creating a client or server for this interface, one must
 define the types it uses.  The simplest way to define one or several
 data types is to pipe their definition in XDR/RPC language through the
-compiler (@pxref{Invoking grpc-compile, @command{grpc-compile}}):
+compiler (@pxref{grpc-compile, @command{grpc-compile}}):
 
 @example
 $ grpc-compile --xdr --constants < input.x > types.scm
@@ -290,7 +290,7 @@
 
 Again, this definition, minus the @code{use-modules} clause, can
 alternatively be generated by the compiler from the RPC description in
-XDR/RPC language (@pxref{Invoking grpc-compile,
+XDR/RPC language (@pxref{grpc-compile,
 @command{grpc-compile}}):
 
 @example
@@ -354,7 +354,7 @@
 
 Alternatively, using the compiler allows the above definition of
 @var{my-rpc-program} to be automatically generated from the XDR/RPC
-definition file (@pxref{Invoking grpc-compile, @command{grpc-compile}}):
+definition file (@pxref{grpc-compile, @command{grpc-compile}}):
 
 @example
 $ grpc-compile --server < input.x > server.scm
@@ -1194,7 +1194,7 @@
 port 111 (TCP or UDP), and it is this server that is queried for
 information about locally hosted RPC programs.  The @code{grpc-rpcinfo}
 program is a portmapper client that can be used to query a portmapper
-server (@pxref{Invoking grpc-rpcinfo, the @code{grpc-rpcinfo} tool})
+server (@pxref{grpc-rpcinfo, the @code{grpc-rpcinfo} tool})
 
 Note that registering RPC programs with the portmapper is optional: it
 is basically a directory mechanism that allows servers to be located
@@ -1291,7 +1291,7 @@
 
 This section describes the compiler's @emph{programming interface}.
 Most of the time, its command-line interface is all is needed; it is
-described in @ref{Invoking grpc-compile, @command{grpc-compile}}.  This
+described in @ref{grpc-compile, @command{grpc-compile}}.  This
 section is intended for users who need more flexibility than is provided
 by @command{grpc-compile}.
 
@@ -1329,8 +1329,8 @@
 The main procedure, @code{rpc-language->sexp}, reads XDR/RPC language
 descriptions and returns the abstract syntax tree (AST) in the form of
 an S-expression.  The AST can be shown using the @code{--intermediate}
-option of the @code{grpc-compile} command-line tool (@pxref{Invoking
-grpc-compile}).  Below is an illustration of the mapping between the
+option of the @code{grpc-compile} command-line tool (@pxref{grpc-compile}).
+Below is an illustration of the mapping between the
 XDR/RPC language and the S-exp representation.
 
 @example
@@ -1369,7 +1369,7 @@
 parameter object} must be a list of symbols or the empty list.  Each
 symbol describes an option.  For instance, @code{allow-unsigned}
 instructs the parser to recognize @code{unsigned} as if it were
-@code{unsigned int} (@pxref{Invoking grpc-compile, Sun XDR/RPC language
+@code{unsigned int} (@pxref{grpc-compile, Sun XDR/RPC language
 extensions}).
 @end defvr
 
@@ -1419,7 +1419,7 @@
 S-expressions, each of which is a top-level Scheme expression
 implementing an element of the input description.  These expressions are
 meant to be dumped to a Scheme file; this is what the command-line
-interface of the compiler does (@pxref{Invoking grpc-compile,
+interface of the compiler does (@pxref{grpc-compile,
 @command{grpc-compile}}).
 
 Here is an example XDR/RPC description and the resulting client code, as
@@ -1546,14 +1546,14 @@
 command-line.
 
 @menu
-* Invoking grpc-compile::       Using the XDR/RPC compiler
-* Invoking grpc-rpcinfo::       Querying the portmapper
-* Invoking grpc-nfs-export::    Playing with the toy NFS server
+* grpc-compile::                  Using the XDR/RPC compiler
+* grpc-rpcinfo::                  Querying the portmapper
+* grpc-nfs-export::               Playing with the toy NFS server
 @end menu
 
 
-@node Invoking grpc-compile, Invoking grpc-rpcinfo, Stand-Alone Tools, Stand-Alone Tools
-@section Invoking @code{grpc-compile}
+@node grpc-compile, grpc-rpcinfo, Stand-Alone Tools, Stand-Alone Tools
+@section @code{grpc-compile}
 
 @cindex @command{grpc-compile}
 
@@ -1656,8 +1656,8 @@
 system in generated code.
 
 
-@node Invoking grpc-rpcinfo, Invoking grpc-nfs-export, Invoking grpc-compile, Stand-Alone Tools
-@section Invoking @code{grpc-rpcinfo}
+@node grpc-rpcinfo, grpc-nfs-export, grpc-compile, Stand-Alone Tools
+@section @code{grpc-rpcinfo}
 
 @cindex @command{rpcinfo}
 @cindex @command{grpc-rpcinfo}
@@ -1702,8 +1702,8 @@
 @end example
 
 
-@node Invoking grpc-nfs-export,  , Invoking grpc-rpcinfo, Stand-Alone Tools
-@section Invoking @code{grpc-nfs-export}
+@node grpc-nfs-export,  , grpc-rpcinfo, Stand-Alone Tools
+@section @code{grpc-nfs-export}
 
 @cindex NFS
 @cindex Network File System
